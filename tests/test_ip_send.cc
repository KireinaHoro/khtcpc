#include <boost/asio.hpp>
#include <iomanip>
#include <iostream>

#include "client-request.h"
#include "ip.h"
#include "mgmt.h"

int main(int argc, char **argv) {
  // UDP ping to port 53
  char payload[] =
      "\xfe\xaf\x00\x35\x01\xc6\x7f\xe3"
      "\x4c\x6f\x72\x65\x6d\x20\x69\x70\x73\x75\x6d\x20\x64\x6f\x6c\x6f"
      "\x72\x20\x73\x69\x74\x20\x61\x6d\x65\x74\x2c\x20\x63\x6f\x6e\x73"
      "\x65\x63\x74\x65\x74\x75\x72\x20\x61\x64\x69\x70\x69\x73\x63\x69"
      "\x6e\x67\x20\x65\x6c\x69\x74\x2c\x20\x73\x65\x64\x20\x64\x6f\x20"
      "\x65\x69\x75\x73\x6d\x6f\x64\x20\x74\x65\x6d\x70\x6f\x72\x20\x69"
      "\x6e\x63\x69\x64\x69\x64\x75\x6e\x74\x20\x75\x74\x20\x6c\x61\x62"
      "\x6f\x72\x65\x20\x65\x74\x20\x64\x6f\x6c\x6f\x72\x65\x20\x6d\x61"
      "\x67\x6e\x61\x20\x61\x6c\x69\x71\x75\x61\x2e\x20\x55\x74\x20\x65"
      "\x6e\x69\x6d\x20\x61\x64\x20\x6d\x69\x6e\x69\x6d\x20\x76\x65\x6e"
      "\x69\x61\x6d\x2c\x20\x71\x75\x69\x73\x20\x6e\x6f\x73\x74\x72\x75"
      "\x64\x20\x65\x78\x65\x72\x63\x69\x74\x61\x74\x69\x6f\x6e\x20\x75"
      "\x6c\x6c\x61\x6d\x63\x6f\x20\x6c\x61\x62\x6f\x72\x69\x73\x20\x6e"
      "\x69\x73\x69\x20\x75\x74\x20\x61\x6c\x69\x71\x75\x69\x70\x20\x65"
      "\x78\x20\x65\x61\x20\x63\x6f\x6d\x6d\x6f\x64\x6f\x20\x63\x6f\x6e"
      "\x73\x65\x71\x75\x61\x74\x2e\x20\x44\x75\x69\x73\x20\x61\x75\x74"
      "\x65\x20\x69\x72\x75\x72\x65\x20\x64\x6f\x6c\x6f\x72\x20\x69\x6e"
      "\x20\x72\x65\x70\x72\x65\x68\x65\x6e\x64\x65\x72\x69\x74\x20\x69"
      "\x6e\x20\x76\x6f\x6c\x75\x70\x74\x61\x74\x65\x20\x76\x65\x6c\x69"
      "\x74\x20\x65\x73\x73\x65\x20\x63\x69\x6c\x6c\x75\x6d\x20\x64\x6f"
      "\x6c\x6f\x72\x65\x20\x65\x75\x20\x66\x75\x67\x69\x61\x74\x20\x6e"
      "\x75\x6c\x6c\x61\x20\x70\x61\x72\x69\x61\x74\x75\x72\x2e\x20\x45"
      "\x78\x63\x65\x70\x74\x65\x75\x72\x20\x73\x69\x6e\x74\x20\x6f\x63"
      "\x63\x61\x65\x63\x61\x74\x20\x63\x75\x70\x69\x64\x61\x74\x61\x74"
      "\x20\x6e\x6f\x6e\x20\x70\x72\x6f\x69\x64\x65\x6e\x74\x2c\x20\x73"
      "\x75\x6e\x74\x20\x69\x6e\x20\x63\x75\x6c\x70\x61\x20\x71\x75\x69"
      "\x20\x6f\x66\x66\x69\x63\x69\x61\x20\x64\x65\x73\x65\x72\x75\x6e"
      "\x74\x20\x6d\x6f\x6c\x6c\x69\x74\x20\x61\x6e\x69\x6d\x20\x69\x64"
      "\x20\x65\x73\x74\x20\x6c\x61\x62\x6f\x72\x75\x6d\x2e\x0a";

  if (argc != 3) {
    fprintf(stderr, "usage: %s <src-ip> <dst-ip>\n", argv[0]);
    return -1;
  }
  boost::asio::io_context ctx;
  struct sockaddr_in src, dst;
  if (inet_pton(AF_INET, argv[1], &src.sin_addr) != 1) {
    fprintf(stderr, "error: src-addr %s is not a valid IP address.\n", argv[1]);
    return -1;
  }
  if (inet_pton(AF_INET, argv[2], &dst.sin_addr) != 1) {
    fprintf(stderr, "error: dst-addr %s is not a valid IP address.\n", argv[2]);
    return -1;
  }

  std::thread t([]() { khtcpc::mgmt::run(); });
  khtcpc::ip::async_write(
      17, src, dst, 0, 255, boost::asio::buffer(payload, sizeof(payload) - 1),
      [&](const struct khtcpc::response *resp_ptr, const void *payload_ptr) {
        BOOST_ASSERT(!payload_ptr);
        if (resp_ptr->ip_write.ret) {
          std::cerr << "Failed to write IP packet: Errno "
                    << resp_ptr->ip_write.ret << std::endl;
        } else {
          std::cout << "IP packet written." << std::endl;
        }
        khtcpc::mgmt::finalize();
      });

  t.join();
}